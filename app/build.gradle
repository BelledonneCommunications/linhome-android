import javax.inject.Inject

plugins {
    id "org.jetbrains.kotlin.kapt"
    id 'com.google.devtools.ksp' version '2.2.20-2.0.3'
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
    id "androidx.navigation.safeargs"
    id 'com.google.firebase.crashlytics'
}

tasks.register("zipTheme", Zip) {
    println("Zipping theme")
    from("../linhome-shared-themes/")
    include("action_types.xml")
    include("method_types.xml")
    include("device_types.xml")
    include("texts.xml")
    include("theme.xml")
    include("images/**/*")
    include("fonts/**/*")
    archiveFileName.set("linhome.zip")
    destinationDirectory.set(file("src/main/assets/"))
}



// a custom task type with ExecOperations injected
abstract class GitVersionTask extends DefaultTask {
    @Inject
    abstract ExecOperations getExecOperations()

    @TaskAction
    void run() {
        def gitVersion = "5.0.0"
        def gitVersionStream = new ByteArrayOutputStream()
        def gitCommitsCount = new ByteArrayOutputStream()
        def gitCommitHash = new ByteArrayOutputStream()

        try {
            getExecOperations().exec {
                commandLine "git", "describe", "--abbrev=0"
                standardOutput = gitVersionStream
            }
            getExecOperations().exec {
                commandLine "git", "rev-list",
                        gitVersionStream.toString().trim() + "..HEAD", "--count"
                standardOutput = gitCommitsCount
            }
            getExecOperations().exec {
                commandLine "git", "rev-parse", "--short", "HEAD"
                standardOutput = gitCommitHash
            }

            if (gitCommitsCount.toString().toInteger() == 0) {
                gitVersion = gitVersionStream.toString().trim()
            } else {
                gitVersion = gitVersionStream.toString().trim() + "." +
                        gitCommitsCount.toString().trim() + "+" +
                        gitCommitHash.toString().trim()
            }
            println("Git version: " + gitVersion)
        } catch (ignored) {
            println("Git not found")
        }
        project.version = gitVersion
    }
}

tasks.register("getGitVersion", GitVersionTask)
tasks.named("preBuild").configure {
    dependsOn(tasks.named("getGitVersion"))
}

tasks.named("preBuild").configure {
    dependsOn(tasks.named("zipTheme"))
    dependsOn(tasks.named("getGitVersion"))
}

def crashlyticsForNdkEnabled = new File(projectDir.absolutePath + '/google-services.json').exists() &&
        new File(LinphoneSdkBuildDir + '/libs/').exists() &&
        new File(LinphoneSdkBuildDir + '/libs-debug/').exists()

android {
    compileSdk = 36
    defaultConfig {
        applicationId "org.linhome"
        minSdkVersion 23
        targetSdkVersion 36
        versionCode 37
        versionName "1.4.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    applicationVariants.all { variant ->
        variant.getMergedFlavor().manifestPlaceholders = [
                linhome_file_provider: applicationId + ".fileprovider"
        ]
        variant.outputs.all {
            outputFileName = "linhome-android-${variant.buildType.name}-${project.version}.apk"
        }
    }

    signingConfigs {
        release {
            def keystorePropertiesFile = rootProject.file("keystore.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
        buildConfig = true
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            if (crashlyticsForNdkEnabled) {
                firebaseCrashlytics {
                    nativeSymbolUploadEnabled true
                    unstrippedNativeLibsDir file(LinphoneSdkBuildDir + '/libs-debug/').toString()
                }
            }
        }
        debug {
            if (crashlyticsForNdkEnabled) {
                firebaseCrashlytics {
                    nativeSymbolUploadEnabled true
                    unstrippedNativeLibsDir file(LinphoneSdkBuildDir + '/libs-debug/').toString()
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    namespace 'org.linhome'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'com.google.android.material:material:1.13.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.vectordrawable:vectordrawable:1.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.9.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.9.5'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.9.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.9.5'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'

    implementation "org.linphone:linphone-sdk-android:5.4.46"

    // PermissionsDispatcher (not ksp compliant)
    implementation 'com.github.permissions-dispatcher:permissionsdispatcher:4.9.2'
    kapt 'com.github.permissions-dispatcher:permissionsdispatcher-processor:4.9.2'

    // Glide (not ksp compliant)
    implementation 'com.github.bumptech.glide:glide:5.0.5'
    kapt 'com.github.bumptech.glide:compiler:5.0.5'

    implementation 'commons-codec:commons-codec:1.19.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"
    implementation 'com.caverock:androidsvg-aar:1.4'

    // Firebase
    implementation 'com.google.firebase:firebase-messaging:25.0.1'
    implementation 'com.google.firebase:firebase-analytics:23.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:20.0.2'

    implementation 'com.github.ybq:Android-SpinKit:1.4.0'
    implementation "androidx.media:media:1.7.1"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-beta01'

    if (crashlyticsForNdkEnabled) {
        implementation 'com.google.firebase:firebase-crashlytics-ndk:18.3.7'
    } else {
        compileOnly 'com.google.firebase:firebase-crashlytics-ndk:18.3.7'
    }
}

if (crashlyticsForNdkEnabled) {
    afterEvaluate {
        assembleRelease.finalizedBy(uploadCrashlyticsSymbolFileRelease)
        assembleDebug.finalizedBy(uploadCrashlyticsSymbolFileDebug)
    }
}
